#include <bits/stdc++.h>
/*
 **
 Success doesn't come to you ,
 You Go To IT .
 **
 */
using namespace std;
#define all(v)          ((v).begin()), ((v).end())
#define finish(x) return cout << x << endl, 0;
#define pb push_back
#define Compiler_Beso ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define clr(v,d)        memset(v, d, sizeof(v))
#define endl '\n'
typedef long long ll;
typedef unsigned long long ull;


ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }


enum dir       { DOWN = 0, UP, RIGHT, LEFT, DOWN_RIGHT, DOWN_LEFT, UP_RIGHT, UP_LEFT };
int  dir_r[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int  dir_c[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
const int MX=1e5+5;
vector<int>low,dfs,l1(MX);
vector<vector<int>>adj,l2(MX);
vector<pair<int,int>>bridge;
map<pair<int,int>,int>mp;
int cnt;
void bridges(int nod , int par){
    dfs[nod]=low[nod]=++cnt;
    for(int w : adj[nod]){
        if(!dfs[w])
            bridges(w, nod);
        if(w!=par){
            low[nod]=min(low[nod],low[w]);
            if(!mp[{min(nod,w),max(nod,w)}])
                bridge.pb({nod,w});
            mp[{min(nod,w),max(nod,w)}]=1;
        }
    }
    if(dfs[nod]==low[nod] && par!=-1){
        if(!mp[{nod,par}])
            bridge.pb({nod,par});
        if(!mp[{par,nod}])
            bridge.pb({par,nod});
        mp[{par,nod}]=mp[{nod,par}]=1;
    }
}
int main()
{
    Compiler_Beso
    
    int n,m,e=0;
    while (cin>>n>>m && (n||m)) {
        cout<<++e<<endl<<endl;
        mp.clear();
        dfs=low=l1;
        adj=l2;
        bridge.clear();
        for(int i=0;i<m;i++){
            int x,y;
            cin>>x>>y;
            adj[x].pb(y);
            adj[y].pb(x);
        }
        for(int i=1;i<=n;i++)
            if(!dfs[i])
                bridges(i, -1);
        
          for(int i=0;i<bridge.size();i++)
              cout<<bridge[i].first<<" "<<bridge[i].second<<endl;
        cout<<"#\n";
    }
    
   
    
    return 0;
}





