#include <bits/stdc++.h>
/*
 **
 *** Your best is not enough
 **
 */
using namespace std;
#define all(v)          ((v).begin()), ((v).end())
#define finish(x) return cout << x << endl, 0;
#define pb push_back
#define Compiler_Beso ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define clr(v,d)        memset(v, d, sizeof(v))
#define endl '\n'
#define pi pair<int,int>
typedef long long ll;
typedef unsigned long long ull;

void fre(){
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
}



ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }


int FixMod(int s,int k){return (s%k+k)%k;}
double dic(pair<int,int>a,pair<int,int>b)
{return (sqrt( (a.first-b.first)*(a.first-b.first) +  (a.second-b.second)* (a.second-b.second) ));}

enum dir       { DOWN = 0, UP, RIGHT, LEFT, DOWN_RIGHT, DOWN_LEFT, UP_RIGHT, UP_LEFT };
int  dir_r[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int  dir_c[] = { 0, 0, 1, -1, 1, -1, 1, -1 };

//Posibles moves for the Knight
int recorrerA[8]= {-2,-1,1,2,2,1,-1,-2};
int recorrerB[8]= {1,2,2,1,-1,-2,-2,-1};


const int MX=1e5+5;
vector<int>inst,low,dfs,l1(MX);
vector<vector<int>>adj,l2(MX);
stack<int>st;
int cnt,ans=0;

void SCC(int nod){
    
    dfs[nod]=low[nod]=++cnt;
    inst[nod]=1;
    st.push(nod);
    for(int w : adj[nod]){
        if(!dfs[w])
            SCC(w);
        if(inst[w])
            low[nod]=min(low[nod],low[w]);
    }
    if(dfs[nod]==low[nod] ){
        int tp = -1;
        ans++;
        while (1)
        {
            tp = st.top();
            inst[tp] = 0;
            st.pop();
            if (tp == nod)
                break;
        }
    }
}


void intial(){
    ans=cnt=0;
    dfs=low=inst=l1;
    adj=l2;
}


int main(){
    
    Compiler_Beso
    
    
    int n,m;
    while (cin>>n>>m && (n || m)) {
        cin.ignore();
        intial();
        map<string,int>mp;
        int c=1;
        for(int i=0;i<n;i++){
            string s;
            getline(cin,s);
            if(mp[s])
                continue;
            mp[s]=c++;
        }
        while (m--) {
            string s,g;
            getline(cin,s);
             getline(cin,g);
            adj[mp[s]].pb(mp[g]);
        }
        for(int i=1;i<=n;i++){
            if(!dfs[i])
                SCC(i);
        }
        cout<<ans<<endl;
    }
    
    
    return 0;
}
