#include <bits/stdc++.h>
/*
 **
 Success doesn't come to you ,
 You Go To IT .
 **
 */
using namespace std;
#define all(v)          ((v).begin()), ((v).end())
#define finish(x) return cout << x << endl, 0;
#define pb push_back
#define Compiler_Beso ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define clr(v,d)        memset(v, d, sizeof(v))
#define endl '\n'
typedef long long ll;
typedef unsigned long long ull;


ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }


enum dir       { DOWN = 0, UP, RIGHT, LEFT, DOWN_RIGHT, DOWN_LEFT, UP_RIGHT, UP_LEFT };
int  dir_r[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int  dir_c[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
const int MX=1e5+5;
vector<vector<int>>adj,l1(MX);
vector<int>vis,ans, in_stack,l2(MX);
bool cycle;
void dfs(int u , bool p) {
    if (vis[u] && in_stack[u]) {
        cycle = true;
        return;
    }
    if (vis[u]) return;
    vis[u] = true;
    in_stack[u] = true;
    for (int i = 0; i < adj[u].size(); i++) {
        int ch = adj[u][i];
        dfs(ch,p);
    }
    in_stack[u] = false;
    if(p)
    ans.pb(u);
}
int main()
{
    Compiler_Beso
    
    int n,m;
    while (cin>>n>>m &&(n||m)) {
        cycle=0;
        adj=l1;
        vis=in_stack=l2;
        ans.clear();
        map<int,int>mp;
        for(int i=0;i<m;i++){
            int x,y; cin>>x>>y;
            adj[x].pb(y);
            mp[y]=1;
        }
        for(int i=1;i<=n;i++){
            if(mp[i])continue;
            if(!vis[i])
             dfs(i,1);
            if(cycle){
                break;
            }
        }
        if(cycle || ans.size()==0){
            cout<<"IMPOSSIBLE"<<endl;
            continue;
        }
        for(int i=(int)ans.size()-1;i>=0;i--)
            cout<<ans[i]<<endl;
    }
    
    
    
    return 0;
}
