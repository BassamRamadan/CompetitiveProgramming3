#include <bits/stdc++.h>
/*
 **
 *** Your best is not enough
 **
 */
using namespace std;
#define all(v)          ((v).begin()), ((v).end())
#define finish(x) return cout << x << endl, 0;
#define pb push_back
#define Compiler_Beso ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define clr(v,d)        memset(v, d, sizeof(v))
#define endl '\n'
typedef long long ll;
typedef unsigned long long ull;

void fre(){
    freopen("","r",stdin);freopen("","w",stdout);
}
ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }
int FixMod(int s,int k){return (s%k+k)%k;}
double dic(pair<int,int>a,pair<int,int>b)
{return (sqrt( (a.first-b.first)*(a.first-b.first) +  (a.second-b.second)* (a.second-b.second) ));}

enum dir       { DOWN = 0, UP, RIGHT, LEFT, DOWN_RIGHT, DOWN_LEFT, UP_RIGHT, UP_LEFT };
int  dir_r[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int  dir_c[] = { 0, 0, 1, -1, 1, -1, 1, -1 };

int main(){
    
    Compiler_Beso
    
    
    int t; cin>>t;
    while (t--) {
        string s,g;
        cin>>s>>g;
        int rem=0;
        string res;
        int mn=min((int)g.size(),(int)s.size());
        int mx=max((int)g.size(),(int)s.size());
        for(int i=0;i<mn;i++){
            int f=s[i]-'0';
            int se=g[i]-'0';
            if(f+se+rem>=10){
                res+=(f+se+rem-10)+'0';
                rem=1;
            }else
            { res+=(f+se+rem)+'0'; rem=0; }
        }
        for(int i=mn;i<mx;i++){
            int f=0;
          if(mx==s.size())
                f=s[i]-'0';
            else
                f=g[i]-'0';
            
            if(f+rem>=10){
                res+=(f+rem-10)+'0';
                rem=1;
            }
            else
            {res+=(f+rem)+'0'; rem=0;}
            
        }
        if(rem)
            res+=rem+'0';
        bool f=0;
        for(int i=0;i<res.size();i++){
            if(res[i]=='0' && !f)
                continue;
            f=1;
            cout<<res[i];
        }
        cout<<endl;
    }
    
   
    
   
    return 0;
    
}






