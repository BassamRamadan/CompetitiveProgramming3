#include <bits/stdc++.h>
/*
 **
 *** Your best is not enough
 **
 */
using namespace std;
#define all(v)          ((v).begin()), ((v).end())
#define finish(x) return cout << x << endl, 0;
#define pb push_back
#define Compiler_Beso ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define clr(v,d)        memset(v, d, sizeof(v))
#define endl '\n'
typedef long long ll;
typedef unsigned long long ull;

void fre(){
    freopen("","r",stdin);freopen("","w",stdout);
}
ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }
int FixMod(int s,int k){return (s%k+k)%k;}
double dic(pair<int,int>a,pair<int,int>b)
{return (sqrt( (a.first-b.first)*(a.first-b.first) +  (a.second-b.second)* (a.second-b.second) ));}

enum dir       { DOWN = 0, UP, RIGHT, LEFT, DOWN_RIGHT, DOWN_LEFT, UP_RIGHT, UP_LEFT };
int  dir_r[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int  dir_c[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
string dir_N[] = { "U","D","R","L","RU","LU","RD","LD"};


//Posibles moves for the Knight
int recorrerA[8]= {-2,-1,1,2,2,1,-1,-2};
int recorrerB[8]= {1,2,2,1,-1,-2,-2,-1};
bool ok(int i,int j){
    return (i>=1&&j>=1&&i<=8&&j<=8);
}


int main(){
    
    Compiler_Beso
    char ch;int c;
    while ( cin>>ch>>c) {
    vector<vector<int>>val(10,vector<int>(10,1e9));
    pair<int, int>s,e;
    s.first=c;
    s.second=(ch-'a')+1;
    cin>>ch>>c;
    e.first=c;
    e.second=(ch-'a')+1;
    queue<pair<int,int>>q;
    q.push(s);
    val[s.first][s.second]=0;
    while (!q.empty()) {
        pair<int, int>cur=q.front();
        q.pop();
        int i=cur.first,j=cur.second,co=val[i][j];
        for(int k=0;k<8;k++){
            int x=i+recorrerA[k];
            int y=j+recorrerB[k];
            if(ok(x,y) && val[x][y]>co+1){
                val[x][y]=co+1;
                q.push({x,y});
            }
        }
    }
        cout<<"To get from "<<char(s.second+'a'-1)<<s.first<<" to "<<char(e.second+'a'-1)<<e.first<<" takes "<<val[e.first][e.second]<<" knight moves.\n";
    }
    
    return 0;
    
}
