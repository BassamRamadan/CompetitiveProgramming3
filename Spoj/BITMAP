#include <bits/stdc++.h>
/*
 **
 *** Your best is not enough
 **
 */
using namespace std;
#define all(v)          ((v).begin()), ((v).end())
#define finish(x) return cout << x << endl, 0;
#define pb push_back
#define Compiler_Beso ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define clr(v,d)        memset(v, d, sizeof(v))
#define endl '\n'
typedef long long ll;
typedef unsigned long long ull;

void fre(){
    freopen("","r",stdin);freopen("","w",stdout);
}
ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }
int FixMod(int s,int k){return (s%k+k)%k;}
double dic(pair<int,int>a,pair<int,int>b)
{return (sqrt( (a.first-b.first)*(a.first-b.first) +  (a.second-b.second)* (a.second-b.second) ));}

enum dir       { DOWN = 0, UP, RIGHT, LEFT, DOWN_RIGHT, DOWN_LEFT, UP_RIGHT, UP_LEFT };
int  dir_r[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int  dir_c[] = { 0, 0, 1, -1, 1, -1, 1, -1 };

//Posibles moves for the Knight
int recorrerA[8]= {-2,-1,1,2,2,1,-1,-2};
int recorrerB[8]= {1,2,2,1,-1,-2,-2,-1};
int n,m;
bool ok(int i,int j){
    return (i>=0 && j>=0 && i<n && j<m);
}
int main(){
    
    Compiler_Beso
    
    
    int t; cin>>t;
    while (t--) {
         cin>>n>>m;
        queue<pair<int,int>>q;
        vector<vector<int>>grid(n,vector<int>(m,1e9));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                char x; cin>>x;
                if(x=='1'){
                    grid[i][j]=0;
                    q.push({i,j});
                }
            }
        }
        while (!q.empty()) {
            pair<int, int>cur=q.front();
            q.pop();
            for(int k=0;k<4;k++){
                int x=cur.first+dir_r[k];
                int y=cur.second+dir_c[k];
                if(ok(x,y) && grid[x][y]>grid[cur.first][cur.second]+1){
                    grid[x][y]=grid[cur.first][cur.second]+1;
                    q.push({x,y});
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(j)cout<<' ';
                cout<<grid[i][j];
            }
            cout<<endl;
        }
    }
    
    
    return 0;
    
}
