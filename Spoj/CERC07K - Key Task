#include <bits/stdc++.h>
/*
 **
 *** Your best is not enough
 **
 */
using namespace std;
#define all(v)          ((v).begin()), ((v).end())
#define finish(x) return cout << x << endl, 0;
#define pb push_back
#define Compiler_Beso ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define clr(v,d)        memset(v, d, sizeof(v))
#define endl '\n'
typedef long long ll;
typedef unsigned long long ull;

void fre(){
    //freopen("","r",stdin);freopen("","w",stdout);
}
ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }
int FixMod(int s,int k){return (s%k+k)%k;}
double dic(pair<int,int>a,pair<int,int>b)
{return (sqrt( (a.first-b.first)*(a.first-b.first) +  (a.second-b.second)* (a.second-b.second) ));}

enum dir       { DOWN = 0, UP, RIGHT, LEFT, DOWN_RIGHT, DOWN_LEFT, UP_RIGHT, UP_LEFT };
int  dir_r[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int  dir_c[] = { 0, 0, 1, -1, 1, -1, 1, -1 };

//Posibles moves for the Knight
int recorrerA[8]= {-2,-1,1,2,2,1,-1,-2};
int recorrerB[8]= {1,2,2,1,-1,-2,-2,-1};

int dis[100][100][100];
 int n,m;
bool ok(int i,int j){
    return (i>=0&&j>=0&&i<n&&j<m);
}
int main(){
    
    Compiler_Beso
    
   
    while (cin>>n>>m && (n||m)) {
        vector<vector<char>>grid(n,vector<char>(m));
        int s,e;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cin>>grid[i][j];
                if(grid[i][j]=='*')
                    s=i,e=j;
            }
        }
        clr(dis,-1);
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{s,e}});
        dis[s][e][0]=0;
        int ans=-1;
        while (!q.empty()) {
            int i=q.front().second.first,j=q.front().second.second;
            int nkeys=q.front().first;
            if(grid[i][j]=='X'){
                ans=dis[i][j][nkeys];
                break;
            }
            q.pop();
            for(int k=0;k<4;k++){
                int x=i+dir_r[k];
                int y=j+dir_c[k];
                if(ok(x,y) && grid[x][y]!='#'){
                    int nkeys2 = nkeys;
                    if ( grid[x][y] == 'b' )  nkeys2 |= 1; else
                    if ( grid[x][y] == 'y' )  nkeys2 |= 2; else
                    if ( grid[x][y]  == 'r' ) nkeys2 |= 4; else
                    if ( grid[x][y]  == 'g' ) nkeys2 |= 8;
                    
                    if(dis[x][y][nkeys2]!=-1)
                        continue;
                    
                    if ( grid[x][y] == 'B' && !( nkeys & 1 ) ) continue;
                    if ( grid[x][y] == 'Y' && !( nkeys & 2 ) ) continue;
                    if ( grid[x][y] == 'R' && !( nkeys & 4 ) ) continue;
                    if ( grid[x][y] == 'G' && !( nkeys & 8 ) ) continue;
                    
                    dis[x][y][nkeys2] = dis[i][j][nkeys] + 1;
                    q.push( {nkeys2,{x,y}} );
                    
                }
            }
        }
        if ( ans == -1 )
            printf( "The poor student is trapped!\n" );
        else
            printf( "Escape possible in %d steps.\n", ans );
    }
    
    
    
    
    return 0;
    
}






